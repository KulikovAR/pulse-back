<?php

namespace App\Http\Services;

use App\Models\Client;
use App\Models\CompanyClient;
use App\Models\TelegramClient;
use Illuminate\Support\Facades\Http;

class TelegramService
{
    public function sendNewEventNotification($eventDto): void
    {
        $client = Client::find($eventDto->getClientId());
        
        if ($client && $telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
            $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
            
            $this->sendMessage(
                $telegramClient->chat_id,
                "<b>üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n–ö–æ–º–ø–∞–Ω–∏—è: {$eventDto->getCompany()['name']}\n–£—Å–ª—É–≥–∏: "
                . implode(', ', array_column($eventDto->getServices(), 'name')) 
                . "\n\n–î–∞—Ç–∞: " . $eventTime->format('d.m.Y')
                . "\n–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)"
                . "\n\n–ê–¥—Ä–µ—Å: {$eventDto->getCompany()['address']}"
            );
        }
    }

    private function getAppLink(): array
    {
        return [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                        'url' => 'https://t.me/PulseAppBot_bot/app'
                    ]
                ]
            ]
        ];
    }

    public function sendMessage(int $chatId, string $message): void
    {
        Http::post("https://api.telegram.org/bot".env('TELEGRAM_BOT_TOKEN')."/sendMessage", [
            'chat_id' => $chatId,
            'text' => $message,
            'parse_mode' => 'HTML',
            'disable_web_page_preview' => true,
            'reply_markup' => json_encode($this->getAppLink())
        ]);
    }

    public function sendEventCancelledByClientNotification($eventDto): void
    {
        $company = $eventDto->getCompany();
        $client = Client::find($eventDto->getClientId());
        $companyClient = CompanyClient::where([
            'company_id' => $company['id'],
            'client_id' => $client->id
        ])->first();
        
        if ($client && isset($company['user_id'])) {
            $companyOwnerClient = Client::where('user_id', $company['user_id'])->first();
            
            if ($companyOwnerClient && $telegramClient = TelegramClient::where('client_id', $companyOwnerClient->id)->first()) {
                $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
                $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
                
                $this->sendMessage(
                    $telegramClient->chat_id,
                    "<b>‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n\n"
                    . "–ö–ª–∏–µ–Ω—Ç: {$companyClient->name}\n"
                    . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                    . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                    . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)"
                );
            }
        }
    }

    public function sendEventCancelledByCompanyNotification($eventDto): void
    {
        $client = Client::find($eventDto->getClientId());
        
        if ($client && $telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
            $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
            
            $this->sendMessage(
                $telegramClient->chat_id,
                "<b>‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π</b>\n\n"
                . "–ö–æ–º–ø–∞–Ω–∏—è: {$eventDto->getCompany()['name']}\n"
                . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)\n\n"
                . "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–º–ø–∞–Ω–∏–µ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"
            );
        }
    }

    public function sendEventConfirmedByClientNotification($eventDto): void
    {
        $company = $eventDto->getCompany();
        $client = Client::find($eventDto->getClientId());
        $companyClient = CompanyClient::where([
            'company_id' => $company['id'],
            'client_id' => $client->id
        ])->first();
        
        if ($client && isset($company['user_id'])) {
            $companyOwnerClient = Client::where('user_id', $company['user_id'])->first();
            
            if ($companyOwnerClient && $telegramClient = TelegramClient::where('client_id', $companyOwnerClient->id)->first()) {
                $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
                $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
                
                $this->sendMessage(
                    $telegramClient->chat_id,
                    "<b>‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n\n"
                    . "–ö–ª–∏–µ–Ω—Ç: {$companyClient->name}\n"
                    . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                    . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                    . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)"
                );
            }
        }
    }

    public function sendEventRepeatNotification($eventDto): void
    {
        $client = Client::find($eventDto->getClientId());
        
        if ($client && $telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
            $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç–∏–ø–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            $repeatText = match($eventDto->getRepeatType()) {
                'weekly' => '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                'biweekly' => '—Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏',
                'monthly' => '–µ–∂–µ–º–µ—Å—è—á–Ω–æ',
                default => '—Ä–∞–∑–æ–≤–æ'
            };
            
            $this->sendMessage(
                $telegramClient->chat_id,
                "<b>üîÑ –°–æ–∑–¥–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n\n"
                . "–ö–æ–º–ø–∞–Ω–∏—è: {$eventDto->getCompany()['name']}\n"
                . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)\n\n"
                . "–¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: " . $repeatText . "\n"
                . "–ê–¥—Ä–µ—Å: {$eventDto->getCompany()['address']}"
            );
        }
    }

    public function sendDayBeforeReminder($eventDto): void
    {
        $client = Client::find($eventDto->getClientId());
        
        if ($client && $telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
            $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
            
            $this->sendMessage(
                $telegramClient->chat_id,
                "<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ (24 —á–∞—Å–∞)</b>\n\n"
                . "–ö–æ–º–ø–∞–Ω–∏—è: {$eventDto->getCompany()['name']}\n"
                . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)\n\n"
                . "–ê–¥—Ä–µ—Å: {$eventDto->getCompany()['address']}"
            );
        }
    }

    public function sendHourBeforeReminder($eventDto): void
    {
        $client = Client::find($eventDto->getClientId());
        
        if ($client && $telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $eventTime = new \DateTime($eventDto->getEventTime(), new \DateTimeZone('UTC'));
            $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
            
            $this->sendMessage(
                $telegramClient->chat_id,
                "<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ (1 —á–∞—Å)</b>\n\n"
                . "–ö–æ–º–ø–∞–Ω–∏—è: {$eventDto->getCompany()['name']}\n"
                . "–£—Å–ª—É–≥–∏: " . implode(', ', array_column($eventDto->getServices(), 'name')) . "\n\n"
                . "–î–∞—Ç–∞: " . $eventTime->format('d.m.Y') . "\n"
                . "–í—Ä–µ–º—è: " . $eventTime->format('H:i') . " (–ú–°–ö, UTC+3)\n\n"
                . "–ê–¥—Ä–µ—Å: {$eventDto->getCompany()['address']}"
            );
        }
    }

    public function sendDailySchedule($client, $events): void
    {
        if ($telegramClient = TelegramClient::where('client_id', $client->id)->first()) {
            $message = "<b>üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n";
            
            foreach ($events as $event) {
                $eventTime = new \DateTime($event['event_time'], new \DateTimeZone('UTC'));
                $eventTime->setTimezone(new \DateTimeZone('Europe/Moscow'));
                
                $message .= "üïê " . $eventTime->format('H:i') . "\n"
                    . "üìç {$event['company']['name']}\n"
                    . "‚ú® –£—Å–ª—É–≥–∏: " . implode(', ', array_column($event['services'], 'name')) . "\n"
                    . "üìå –ê–¥—Ä–µ—Å: {$event['company']['address']}\n\n";
            }
            
            $this->sendMessage($telegramClient->chat_id, $message);
        }
    }
}